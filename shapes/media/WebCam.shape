{
  "draw2d": [
    {
      "type": "shape_designer.figure.PolyRect",
      "id": "ea68019b-0785-24b0-f4c1-ba88f0028aeb",
      "x": 7941,
      "y": 7941,
      "width": 100,
      "height": 100,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle",
        "baseClass": "draw2d.SetFigure",
        "code": "/**\n * Generated Code for the Draw2D touch HTML5 lib.\n * File will be generated if you save the *.shape file.\n *\n * by 'Draw2D Shape Designer'\n *\n * Custom JS code to tweak the standard behaviour of the generated\n * shape. add your custom code and event handler here.\n *\n * Looks disconcerting - extending my own class. But this is a good method to\n * merge basic code and override them with custom methods.\n */\ntestShape = testShape.extend({\n\n    init: function(attr, setter, getter){\n        this._super(attr, setter, getter);\n        var onFailSoHard = function(e) {\n          console.log('Reeeejected!', e);\n        };\n\n        // Not showing vendor prefixes.\n        navigator.mediaDevices.getUserMedia({ audio: false, video: { width: 350, height: 350 } })\n            .then(function(stream) {\n                /* use the stream */\n                console.log(\"accepted\")\n                const options = {mimeType: 'video/webm'};\n    \n                const mediaRecorder = new MediaRecorder(stream, options);\n\n                mediaRecorder.addEventListener('dataavailable', function(e) {\n                    if (e.data.size > 0) {\n                       recordedChunks.push(e.data);\n                    }\n\n                    if(shouldStop === true && stopped === false) {\n                       mediaRecorder.stop();\n                       stopped = true;\n                    }\n                });\n\n                mediaRecorder.addEventListener('stop', function() {\n                    downloadLink.href = URL.createObjectURL(new Blob(recordedChunks));\n                    downloadLink.download = 'acetest.webm';\n                });\n\n                mediaRecorder.start();\n            })\n            .catch(function(err) {\n                 /* handle the error */\n                 console.log(\"catched\")\n            })\n    },\n\n    /**\n     *  Called by the simulator for every calculation\n     *  loop\n     *  @param {Object} context context where objects can store or handover global variables to other objects.\n     *  @required\n     **/\n    calculate:function( context)\n    {\n    },\n\n\n    /**\n     *  Called if the simulation mode is starting\n     *  @required\n     **/\n    onStart:function( context )\n    {\n    },\n\n    /**\n     *  Called if the simulation mode is stopping\n     *  @required\n     **/\n    onStop:function( context )\n    {\n    },\n\n    /**\n     * Get the simulator a hint which kind of hardware the shapes requires or supports\n     * This helps the simulator to bring up some dialogs and messages if any new hardware is connected/get lost\n     * and your are running a circuit which needs this kind of hardware...\n     **/\n    getRequiredHardware: function(){\n      return {\n        raspi: false,\n        arduino: false\n      }\n    }\n\n});"
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(255,255,255,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 1,
      "radius": 0,
      "dasharray": null,
      "vertices": [
        {
          "x": 7941,
          "y": 7941
        },
        {
          "x": 8041,
          "y": 7941
        },
        {
          "x": 8041,
          "y": 8041
        },
        {
          "x": 7941,
          "y": 8041
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.StrokeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        }
      ]
    }
  ]
}