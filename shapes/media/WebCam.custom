/**
 * Generated Code for the Draw2D touch HTML5 lib.
 * File will be generated if you save the *.shape file.
 *
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custom code and event handler here.
 *
 * Looks disconcerting - extending my own class. But this is a good method to
 * merge basic code and override them with custom methods.
 */
media_WebCam = media_WebCam.extend({

    init: function(attr, setter, getter){
        this._super(attr, setter, getter);
        
        this.img = new draw2d.shape.basic.Image()
        this.add(this.img, new draw2d.layout.locator.XYAbsPortLocator({x:0,y:0}))
        
        var onFailSoHard = function(e) {
          console.log('Reeeejected!', e);
        };

        this.imageCapture = null;
        // Not showing vendor prefixes.
        navigator.mediaDevices.getUserMedia({ audio: false, video: true })
            .then((stream) =>{
                /* use the stream */
                console.log("accepted")
                const track = stream.getVideoTracks()[0];
                this.imageCapture = new ImageCapture(track);
                
                return this.imageCapture.getPhotoCapabilities();
            })
            .then(photoCapabilities => {
                const settings = this.imageCapture.track.getSettings();
                console.log("photoCapabilities", photoCapabilities);
                return this.imageCapture.getPhotoSettings();
            })
            .then(photoSettings => {
                console.log("photoSettings", photoSettings);
            })
            .catch((err) =>{
                 /* handle the error */
                 console.log("catched")
            })
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @param {Object} context context where objects can store or handover global variables to other objects.
     *  @required
     **/
    calculate:function( context)
    {
        if(this.imageCapture===null){
            return
        }
        this.imageCapture.takePhoto({imageHeight:150, imageWidth:150}).then(function(blob) {
            var a = new FileReader();
            a.onload = function(e) {
                console.log(e.target.result);
            }
            a.readAsDataURL(blob);
            
        }).catch(function(error) {
            console.log('takePhoto() error: ', error);
        });
    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function( context )
    {
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function( context )
    {
    },

    /**
     * Get the simulator a hint which kind of hardware the shapes requires or supports
     * This helps the simulator to bring up some dialogs and messages if any new hardware is connected/get lost
     * and your are running a circuit which needs this kind of hardware...
     **/
    getRequiredHardware: function(){
      return {
        raspi: false,
        arduino: false
      }
    }

});