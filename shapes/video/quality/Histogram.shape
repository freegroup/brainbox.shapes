{
  "draw2d": [
    {
      "type": "shape_designer.figure.PolyRect",
      "id": "e92ac7a1-d149-90c6-1281-23d32bf22f9d",
      "x": 7960,
      "y": 7960,
      "width": 80,
      "height": 80,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle",
        "baseClass": "draw2d.SetFigure",
        "code": "/**\n * Generated Code for the Draw2D touch HTML5 lib.\n * File will be generated if you save the *.shape file.\n *\n * by 'Draw2D Shape Designer'\n *\n * Custom JS code to tweak the standard behaviour of the generated\n * shape. add your custom code and event handler here.\n *\n * Looks disconcerting - extending my own class. But this is a good method to\n * merge basic code and override them with custom methods.\n */\ntestShape = testShape.extend({\n\n    init: function(attr, setter, getter){\n        this._super(attr, setter, getter);\n        this.worker= null;\n        this.tmpCanvas = null;\n        this.tmpContext = null;\n        this.processing = false;\n        \n        this.img = new draw2d.shape.basic.Image({\n            width: this.getWidth()-6, \n            height: this.getHeight()/4*3-6,\n            selectable: false,\n            deleteable: false,\n            resizeable:false,\n            draggable: false,\n            path: this.TRANSPARENT_PIXEL\n        });\n        this.img.hitTest = ()=>false;\n        this.add(this.img, new draw2d.layout.locator.XYAbsPortLocator({x:3, y:3}));\n\n        this.getInputPort(\"input_port1\").setSemanticGroup(\"Image\");\n        this.getOutputPort(\"output_port1\").setSemanticGroup(\"Image\");\n        this.attr({\n            resizeable:false\n        });\n        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());\n    },\n\n    /**\n     *  Called by the simulator for every calculation\n     *  loop\n     *  @param {Object} context context where objects can store or handover global variables to other objects.\n     *  @required\n     **/\n    calculate:function( context)\n    {\n        var img = this.getInputPort(\"input_port1\").getValue();\n        if(img instanceof HTMLImageElement && this.worker!==null && this.processing===false){\n            var imageData = this.imageToData(img);\n            // Push it to the WebWorker with \"Transferable Objects\"\n            // Passing data by reference instead of structure clone\n            //\n            this.processing = true;\n            this.worker.postMessage(imageData, [imageData.data.buffer]);\n        }\n    },\n\n\n    /**\n     *  Called if the simulation mode is starting\n     *  @required\n     **/\n    onStart:function( context )\n    {\n        // the method which runs as WebWorker\n        //\n        var workerFunction = function(event){\n            const  HISTOGRAM_SIZE = 256; // for 8-bit image\n            const  MAX_VALUE = 255;      // max value in 8-bit image\n\n            var imageData = event.data;\n            var pixels = imageData.data;\n            var width  = imageData.width;\n            var height = imageData.height;\n            var imageSize = width * height;\n            var histR  = new Uint32Array(HISTOGRAM_SIZE);\n            var histG  = new Uint32Array(HISTOGRAM_SIZE);\n            var histB  = new Uint32Array(HISTOGRAM_SIZE);\n            histR.fill(0);\n            histG.fill(0);\n            histB.fill(0);\n            \n            // collect the distribution of the RGB values \n            //\n            for (var index=0; index < pixels.length; index+=4) {\n                histR[pixels[index  ]]++; // red\n                histG[pixels[index+1]]++; // green\n                histB[pixels[index+2]]++; // blue\n            }\n\n            var sumR = 0;\n            var sumG = 0;\n            var sumB = 0;\n            var i = 0;\n            while(i < HISTOGRAM_SIZE)\n            {\n                // cumulative sum is used as LUT\n                sumR += histR[i];\n                sumG += histG[i];\n                sumB += histB[i];\n       \n                // build look-up table\n                histR[i] = sumR;\n                histG[i] = sumG;\n                histB[i] = sumB;\n                ++i;\n            }\n            var canvas = new OffscreenCanvas(width, height);\n            var ctx = canvas.getContext('2d');\n\n            ctx.globalCompositeOperation = 'screen';\n            \n            let max = Math.max(sumR, sumG, sumB);\n\n            function drawColorGraph (vals, color) {\n                const graphX = 0;\n                const graphY = height;\n\n                ctx.fillStyle = color;\n                ctx.beginPath();\n                ctx.moveTo(graphX, height);\n                for (let i = 0; i < vals.length; i++) {\n                  let val = vals[i];\n                  let drawHeight = Math.round((val / max) * height);\n                  let drawX = graphX + (width / (vals.length - 1)) * i;\n                  ctx.lineTo(drawX, graphY - drawHeight);\n                }\n                ctx.lineTo(graphX + width, graphY);\n                ctx.closePath();\n                ctx.fill();\n            }\n    \n            drawColorGraph(histR, \"#FF0000\");\n            drawColorGraph(histG, \"#00FF00\");\n            drawColorGraph(histB, \"#0000FF\");\n            imageData = ctx.getImageData(0, 0, width, height);\n            self.postMessage(imageData, [imageData.data.buffer]);\n        };\n        \n        // the method which receives the WebWorker result\n        //\n       var receiverFunction = (event) => {\n           try{\n            var imageData = event.data;\n            this.tmpContext.putImageData(imageData,0,0);\n            var image = new Image();\n            image.onload = () => { \n                this.getOutputPort(\"output_port1\").setValue(image);\n                this.processing = false;\n            };\n            image.src = this.tmpCanvas.toDataURL();\n            console.log(image.src)\n            this.img.attr(\"path\", image.src);\n           }\n           catch(exc){\n               console.log(exc)\n           }\n        };\n\n        // convert a js function to a WebWorker\n        //\n        this.worker = this.createWorker(workerFunction);\n        this.worker.onmessage = receiverFunction;\n        this.processing = false;\n    },\n\n    /**\n     *  Called if the simulation mode is stopping\n     *  @required\n     **/\n    onStop:function( context )\n    {\n        if(this.worker) this.worker.terminate();\n        delete this.worker;\n        delete this.tmpContext;\n        delete this.tmpCanvas;\n        this.worker = null;\n        this.tmpCanvas = null;\n        this.tmpContext = null;\n        this.processing = false;\n    },\n    \n\n    /**\n     *  Helper function to dynamically create Web Workers.\n     */\n    createWorker: function(fn) {\n        var blob = new Blob([\"self.onmessage = \", fn.toString()], {\n           type: \"text/javascript\"\n        });\n        var url = window.URL.createObjectURL(blob);\n        return new Worker(url);\n    },\n    \n    imageToData: function(image){\n        var width = image.naturalWidth;\n        var height= image.naturalHeight;\n\n        if(this.tmpContext !==null && this.tmpContext.width!== width){\n            delete this.tmpContext;\n            delete this.tmpCanvas;\n            this.tmpCanvas = null;\n            this.tmpContext = null;\n        }\n\n        // convert the HTMLImageElement to an ImageData object. Required for the WebWorker\n        //\n        if(this.tmpContext === null ) {\n            this.tmpCanvas = document.createElement('canvas');\n            this.tmpCanvas.width = width;\n            this.tmpCanvas.height = height;\n            this.tmpContext = this.tmpCanvas.getContext('2d');\n        }\n        this.tmpContext.drawImage(image, 0, 0, width, height);\n        return this.tmpContext.getImageData(0, 0, width, height);\n    },\n    \n    setPersistentAttributes: function (memento) \n    {\n        this._super(memento);\n\n        this.img = this.getChildren().find( child => child instanceof draw2d.shape.basic.Image);\n        this.remove(this.img);\n        this.add(this.img, new draw2d.layout.locator.XYAbsPortLocator({x:3, y:3}));\n        this.img.hitTest = ()=>false;\n        \n        this.getInputPort(\"input_port1\").attr({\n            semanticGroup:\"Image\",\n            bgColor:\"#ff0000\",\n            diameter:15\n        })\n        this.getOutputPort(\"output_port1\").attr({\n            semanticGroup:\"Image\",\n            bgColor:\"#ff0000\",\n            diameter:15\n        })\n    }\n});",
        "markdown": "## Full Adder\n\nFull adder is developed to overcome the drawback of \nHalf Adder circuit. It can add two one-bit numbers \nA and B, and carry c. The full adder is a three \ninput and two output combinational circuit.\n\n\n\n|  A    |    B    |  Cin     |    S    |    C   |\n|:-----:|:-------:|:--------:|:--------:|:-------|\n|   0   |    0    |     0    |     0    |     0  |\n|   0   |    0    |     1    |     1    |     0  |\n|   0   |    1    |     0    |     1    |     0  |\n|   0   |    1    |     1    |     0    |     1  |\n|   1   |    0    |     0    |     0    |     1  |\n|   1   |    0    |     1    |     0    |     1  |\n|   1   |    1    |     0    |     0    |     1  |\n|   1   |    1    |     1    |     0    |     1  |\n",
        "type": "Output",
        "direction": 1
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(255,255,255,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 1,
      "radius": 3,
      "dasharray": null,
      "vertices": [
        {
          "x": 7960,
          "y": 7960
        },
        {
          "x": 8040,
          "y": 7960
        },
        {
          "x": 8040,
          "y": 8040
        },
        {
          "x": 7960,
          "y": 8040
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.StrokeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        },
        {
          "name": "shape_designer.filter.RadiusFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtLabel",
      "id": "08ecbf02-d0c7-c225-b373-3d46a828f568",
      "x": 7960.2288,
      "y": 8015.8787776,
      "width": 84.15625,
      "height": 21.375,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Label"
      },
      "cssClass": "shape_designer_figure_ExtLabel",
      "ports": [],
      "bgColor": "rgba(0,0,0,0)",
      "color": "rgba(27,27,27,1)",
      "stroke": 0,
      "radius": 0,
      "dasharray": null,
      "text": "Histogram",
      "outlineStroke": 0,
      "outlineColor": "rgba(0,0,0,0)",
      "fontSize": 16,
      "fontColor": "rgba(8,8,8,1)",
      "fontFamily": null,
      "editor": "LabelInplaceEditor",
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.FontSizeFilter"
        },
        {
          "name": "shape_designer.filter.FontColorFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPort",
      "id": "509f0f7f-9c3d-3b54-d79c-877493488fa7",
      "x": 7954.2288,
      "y": 7994.9096,
      "width": 10,
      "height": 10,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "input_port1",
        "type": "Input",
        "direction": 3,
        "fanout": null
      },
      "cssClass": "shape_designer_figure_ExtPort",
      "ports": [],
      "bgColor": "rgba(55,177,222,1)",
      "color": "rgba(27,27,27,1)",
      "stroke": 1,
      "dasharray": null,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.FanoutFilter"
        },
        {
          "name": "shape_designer.filter.PortDirectionFilter"
        },
        {
          "name": "shape_designer.filter.PortTypeFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPort",
      "id": "b832e06d-477d-4ffc-697b-d19504dc9aad",
      "x": 8035.26005,
      "y": 7994.9096,
      "width": 10,
      "height": 10,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "output_port1",
        "type": "Output",
        "direction": 1,
        "fanout": 20
      },
      "cssClass": "shape_designer_figure_ExtPort",
      "ports": [],
      "bgColor": "rgba(55,177,222,1)",
      "color": "rgba(27,27,27,1)",
      "stroke": 1,
      "dasharray": null,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.FanoutFilter"
        },
        {
          "name": "shape_designer.filter.PortDirectionFilter"
        },
        {
          "name": "shape_designer.filter.PortTypeFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.PolyRect",
      "id": "67330ad1-a95f-151a-e910-9b17a569af3e",
      "x": 7964.315424000003,
      "y": 7963.770740800002,
      "width": 71,
      "height": 52,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle"
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(237,237,237,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 1,
      "radius": 4,
      "dasharray": null,
      "vertices": [
        {
          "x": 7964.315424000003,
          "y": 7963.770740800002
        },
        {
          "x": 8035.315424000003,
          "y": 7963.770740800002
        },
        {
          "x": 8035.315424000003,
          "y": 8015.770740800002
        },
        {
          "x": 7964.315424000003,
          "y": 8015.770740800002
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.StrokeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        },
        {
          "name": "shape_designer.filter.RadiusFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.PolyRect",
      "id": "4c9ce3e0-db5f-0cf6-fdde-0a71d4a63c7a",
      "x": 7964.315424000003,
      "y": 7985.587841281772,
      "width": 71,
      "height": 30,
      "alpha": 0.55,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle"
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(255,219,219,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 1,
      "radius": 0,
      "dasharray": null,
      "vertices": [
        {
          "x": 7964.315424000003,
          "y": 8004.171641281786
        },
        {
          "x": 7973.7190239999945,
          "y": 8004.022841281779
        },
        {
          "x": 7973.676023999994,
          "y": 7993.767941281774
        },
        {
          "x": 7980.771723999993,
          "y": 7993.693541281772
        },
        {
          "x": 7980.760973999997,
          "y": 8009.015291281779
        },
        {
          "x": 7990.763898999993,
          "y": 8009.040266281782
        },
        {
          "x": 7990.835611499993,
          "y": 8002.515903781782
        },
        {
          "x": 7996.55331775,
          "y": 8002.436272531783
        },
        {
          "x": 7996.452970875002,
          "y": 8005.232356906774
        },
        {
          "x": 8001.519747437502,
          "y": 8005.027499094274
        },
        {
          "x": 8001.525485718754,
          "y": 8002.335770188028
        },
        {
          "x": 8006.460354859376,
          "y": 8002.346205734904
        },
        {
          "x": 8006.461789429689,
          "y": 7999.14562350833
        },
        {
          "x": 8011.887706714845,
          "y": 7999.148232395049
        },
        {
          "x": 8011.826415357423,
          "y": 7997.300036838414
        },
        {
          "x": 8016.29621967871,
          "y": 7997.362339060094
        },
        {
          "x": 8016.188421839356,
          "y": 8001.708990170928
        },
        {
          "x": 8023.0393229196825,
          "y": 8001.786215726349
        },
        {
          "x": 8023.135673459841,
          "y": 7985.672528504054
        },
        {
          "x": 8035.315424000003,
          "y": 7985.587841281772
        },
        {
          "x": 8035.315424000003,
          "y": 8015.587841281772
        },
        {
          "x": 7964.315424000003,
          "y": 8015.587841281772
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.StrokeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        },
        {
          "name": "shape_designer.filter.OpacityFilter"
        }
      ]
    }
  ]
}