/**
 * Generated Code for the Draw2D touch HTML5 lib.
 * File will be generated if you save the *.shape file.
 *
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custom code and event handler here.
 *
 * Looks disconcerting - extending my own class. But this is a good method to
 * merge basic code and override them with custom methods.
 */
video_ToBlackWhite = video_ToBlackWhite.extend({

    init: function(attr, setter, getter){
        this._super(attr, setter, getter);
        this.worker= null;
        this.tmpCanvas = null;
        this.tmpContext = null;
        this.getInputPort("input_port1").setSemanticGroup("Image");
        this.getOutputPort("output_port1").setSemanticGroup("Image");
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @param {Object} context context where objects can store or handover global variables to other objects.
     *  @required
     **/
    calculate:function( context)
    {
        var img = this.getInputPort("input_port1").getValue();
        var threshold = this.getInputPort("input_port2").getValue();
        if(img instanceof HTMLImageElement && this.worker!==null){
            var width = img.naturalWidth;
            var height= img.naturalHeight;
            // convert the HTMLImageElement to an ImageData object. Required for the WebWorker
            //
            if(this.tmpContext === null ) {
                this.tmpCanvas = document.createElement('canvas');
                this.tmpCanvas.width = width;
                this.tmpCanvas.height = height;
                this.tmpContext = this.tmpCanvas.getContext('2d');
            }
            this.tmpContext.drawImage(img, 0, 0, width, height);
            var imageData = this.tmpContext.getImageData(0, 0, width, height);
            // Push it to the WebWorker with "Transferable Objects"
            // Passing data by reference instead of structure clone
            //
            this.worker.postMessage( {
                imageData: imageData,
                threshold: threshold
                }, [imageData.data.buffer]
            );
        }
    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function( context )
    {
        // the method which runs as WebWorker
        //
        var webWorkerFunction = function(event){
            var imageData = event.data.imageData;
            var threshold = event.data.threshold;
            //console.log(imageData.data.buffer)
            // map offset from 0-5 => 0-255
            threshold = 255/5*threshold;
            var pixels = imageData.data;
            for( let x = 0; x < pixels.length; x += 4 ) {
                let lum = 0.2126 * pixels[x] + 0.7152 * pixels[x+1] + 0.0722 * pixels[x+2];
                let value= lum>threshold?255:0;
                pixels[x]     = value;
                pixels[x + 1] = value;
                pixels[x + 2] = value;
            }
            self.postMessage(
                imageData, [imageData.data.buffer]
             );
        };
        
        // convert a js function to a WebWorker
        //
        this.worker = this.createWorker(webWorkerFunction);
        
        // The result event if the WebWorker has converted an pixelarray to another pixel array
        //
        this.worker.onmessage =  (event) => {
            var imageData = event.data;
            
            this.tmpContext.putImageData(imageData,0,0);
            var image = new Image();
            image.onload = () => {
                this.getOutputPort("output_port1").setValue(image);
            }
            image.src = this.tmpCanvas.toDataURL();
        };
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function( context )
    {
        this.worker.terminate();
        delete this.worker;
        delete this.tmpContext;
        delete this.tmpCanvas;
        this.worker = null;
        this.tmpCanvas = null;
        this.tmpContext = null;
    },
    

    /**
     *  Helper function to dynamically create Web Workers.
     */
    createWorker: function(fn) {
        var blob = new Blob(["self.onmessage = ", fn.toString()], {
           type: "text/javascript"
        });
        var url = window.URL.createObjectURL(blob);
        return new Worker(url);
    }
});