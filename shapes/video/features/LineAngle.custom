/**
 * Generated Code for the Draw2D touch HTML5 lib.
 * File will be generated if you save the *.shape file.
 *
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custom code and event handler here.
 *
 * Looks disconcerting - extending my own class. But this is a good method to
 * merge basic code and override them with custom methods.
 */
video_features_LineAngle = video_features_LineAngle.extend({

    init: function(attr, setter, getter){
        this._super(attr, setter, getter);
        this.worker= null;
        this.tmpCanvas = null;
        this.tmpContext = null;
        this.processing = false;
        this.getInputPort("input_port1").setSemanticGroup("Image");
        this.getOutputPort("output_port1").setSemanticGroup("Image");
        this.attr({
            resizeable:false
        });
        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @param {Object} context context where objects can store or handover global variables to other objects.
     *  @required
     **/
    calculate:function( context)
    {
        var img = this.getInputPort("input_port1").getValue();
        if(img instanceof HTMLImageElement && this.worker!==null && this.processing===false){
            var imageData = this.imageToData(img);
            // Push it to the WebWorker with "Transferable Objects"
            // Passing data by reference instead of structure clone
            //
            this.processing = true;
            this.worker.postMessage(imageData, [imageData.data.buffer]);
        }
    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function( context )
    {
        // the method which runs as WebWorker
        //
        var workerFunction = function(event){
            var imageData = event.data;
            var pixels    = imageData.data;
            var width     = imageData.width;
            var height    = imageData.height;
            var angles    = 360;
            var rhoMax    = Math.sqrt(width*width + height*height);
            var accum     = Array(angles);
            var houghAccCalled=false;
            
            // Precalculate tables.
            if(self.cosTable===undefined){
                self.cosTable = new Float64Array(angles);
                self.sinTable = new Float64Array(angles);
                var theta = 0;
                var piSteps = Math.PI / angles;
                for (var i = 0; i < angles; i++) {
                    self.cosTable[i] = Math.cos(theta);
                    self.sinTable[i] = Math.sin(theta);
                    theta += piSteps;
                }
            }
           
            function getAngle({x1, y1, x2, y2}) {
                return Math.atan2(y1 - y2, x1 - x2) * 180 / Math.PI;
            }
            
            // Clipping helper
            //
            // bit code reflects the point position relative to the bbox:
            //         left  mid  right
            //    top  1001  1000  1010
            //    mid  0001  0000  0010
            // bottom  0101  0100  0110
            
            function bitCode(p, bbox) {
                var code = 0;
            
                if (p[0] < bbox[0]) code |= 1; // left
                else if (p[0] > bbox[2]) code |= 2; // right
            
                if (p[1] < bbox[1]) code |= 4; // bottom
                else if (p[1] > bbox[3]) code |= 8; // top
            
                return code;
            }
            // intersect a segment against one of the 4 lines that make up the bbox
            
            function intersect(a, b, edge, bbox) {
                return edge & 8 ? [a[0] + (b[0] - a[0]) * (bbox[3] - a[1]) / (b[1] - a[1]), bbox[3]] : // top
                    edge & 4 ? [a[0] + (b[0] - a[0]) * (bbox[1] - a[1]) / (b[1] - a[1]), bbox[1]] : // bottom
                    edge & 2 ? [bbox[2], a[1] + (b[1] - a[1]) * (bbox[2] - a[0]) / (b[0] - a[0])] : // right
                    edge & 1 ? [bbox[0], a[1] + (b[1] - a[1]) * (bbox[0] - a[0]) / (b[0] - a[0])] : null; // left
            }
            
            // Sutherland-Hodgeman polygon clipping algorithm
            function clipLine(line) {
                var points = [[line.x1, line.y1],[line.x2, line.y2]];
                var bbox = [0,0, width, height];
                var len = points.length,
                    codeA = bitCode(points[0], bbox),
                    part = [],
                    i, a, b, codeB, lastCode;
            
                console.log("codeA", codeA)
                var result = [];
            
                for (i = 1; i < len; i++) {
                    a = points[i - 1];
                    b = points[i];
                    codeB = lastCode = bitCode(b, bbox);
            
                    while (true) {
            
                        if (!(codeA | codeB)) { // accept
                            part.push(a);
                            if (codeB !== lastCode) { // segment went outside
                                part.push(b);
                                if (i < len - 1) { // start a new line
                                    result.push(part);
                                    part = [];
                                }
                            } else if (i === len - 1) {
                                part.push(b);
                            }
                            break;
                        } else if (codeA & codeB) { // trivial reject
                            console.log("trivial - reject")
                            break;
                        } else if (codeA) { // a outside, intersect with clip edge
                            a = intersect(a, b, codeA, bbox);
                            codeA = bitCode(a, bbox);
                        } else { // b outside
                            b = intersect(a, b, codeB, bbox);
                            codeB = bitCode(b, bbox);
                        }
                    }
                    codeA = lastCode;
                }
            
                if (part.length) result.push(part);
            
                if(result.length > 0){
                    result = result[0]
                    if(result.length === 2){
                        p1 = result[0];
                        p2 = result[1];
                        return {x1: p1[0], y1: p1[1], x2: p2[0], y2: p2[1]}
                    }
                }
                return null;
            }

            function findMaxInHough() {
                var max = 0;
                var bestRho = 0;
                var bestTheta = 0;
                for (var i = 0; i < angles; i++) {
                    for (var j = 0; j < accum[i].length; j++) {
                        if (accum[i][j] > max) {
                            max = accum[i][j];
                            bestRho = j;
                            bestTheta = i;
                        }
                    }
                }

                if (max > height) {
                    bestRho <<= 1; // accumulator is bitshifted
                    bestRho -= rhoMax; /// accumulator has rhoMax added
                    var a = self.cosTable[bestTheta];
                    var b = self.sinTable[bestTheta];

                    var x1 = (a * bestRho + 1000 * (-b))|0;
                    var y1 = (b * bestRho + 1000 * ( a))|0;
                    var x2 = (a * bestRho - 1000 * (-b))|0;
                    var y2 = (b * bestRho - 1000 * ( a))|0;
                    // return a line with P1(x1,y1) and P2(x2,y2)
                    return {x1,y1, x2,y2};
                }
                return null;
            }
            
            function houghAcc(x, y) {
                houghAccCalled= true;
                var rho;
                x -= width  / 2;
                y -= height / 2;
                for (var index = 0; index < angles; index++) {
                    rho = rhoMax + x * self.cosTable[index] + y * self.sinTable[index];
                    rho >>= 1;
                    if (accum[index] === undefined) accum[index] = [];
                    if (accum[index][rho] === undefined) {
                       accum[index][rho] = 1;
                    } else {
                       accum[index][rho]++;
                    }
                }
            }
            
            for (var index=0; index<pixels.length; index+=4) {
                // because we NEED a black/white image we can just use the RED part
                // if the RGBA color
                if(pixels[index]<80){
                    var x = (index/4) % width;
                    var y = (index/4) / width;
                    houghAcc(x,y);
                }
            }

            var line = houghAccCalled?findMaxInHough():null;
            
            var canvas = new OffscreenCanvas(width, height);
            var ctx = canvas.getContext('2d');
            ctx.fillStyle = 'rgba(255,255,255,1)';
            ctx.beginPath();
            ctx.fillRect(0,0,width, height);
            ctx.closePath();

            if(line){
                line = {
                    x1:line.x1 + width / 2, 
                    y1:line.y1 + height / 2,
                    x2:line.x2 + width / 2, 
                    y2:line.y2 + height / 2
                }
                    
    
                line2 = clipLine(line);
                if(line2 && line2.length>0){
                    line2 = line2[0]
                    console.log(line, line2)
                }
                ctx.beginPath();
                ctx.strokeStyle = 'rgba(255,0,0,1)';
                ctx.lineWidth = Math.max(2,(width/25)|0);
                ctx.moveTo(line.x1 + width / 2, line.y1 + height / 2);
                ctx.lineTo(line.x2 + width / 2, line.y2 + height / 2);
                ctx.stroke();
                ctx.closePath();
                console.log(getAngle(line));
            }
            imageData = ctx.getImageData(0, 0, width, height);
            self.postMessage({imageData, line}, [imageData.data.buffer]);
        };
        
        // the method which receives the WebWorker result
        //
       var receiverFunction = (event) => {
            var imageData = event.data.imageData;
            var line = event.data.line;
            this.tmpContext.putImageData(imageData,0,0);
            var image = new Image();
            image.onload = () => { 
                this.getOutputPort("output_port1").setValue(image);
                this.processing = false;
            };
            image.src = this.tmpCanvas.toDataURL();
        };


        // convert a js function to a WebWorker
        //
        this.worker = this.createWorker(workerFunction);
        this.worker.onmessage = receiverFunction;
        this.processing = false;
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function( context )
    {
        if(this.worker) this.worker.terminate();
        delete this.worker;
        delete this.tmpContext;
        delete this.tmpCanvas;
        this.worker = null;
        this.tmpCanvas = null;
        this.tmpContext = null;
        this.processing = false;
    },
    

    /**
     *  Helper function to dynamically create Web Workers.
     */
    createWorker: function(fn) {
        var blob = new Blob(["self.onmessage = ", fn.toString()], {
           type: "text/javascript"
        });
        var url = window.URL.createObjectURL(blob);
        return new Worker(url);
    },
    
    imageToData: function(image){
        var width = image.naturalWidth;
        var height= image.naturalHeight;
        // convert the HTMLImageElement to an ImageData object. Required for the WebWorker
        //
        if(this.tmpContext === null ) {
            this.tmpCanvas = document.createElement('canvas');
            this.tmpCanvas.width = width;
            this.tmpCanvas.height = height;
            this.tmpContext = this.tmpCanvas.getContext('2d');
        }
        this.tmpContext.drawImage(image, 0, 0, width, height);
        return this.tmpContext.getImageData(0, 0, width, height);
    }
});